b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    1) package main
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    2) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    3) import (
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    4) 	"encoding/hex"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    5) 	"fmt"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    6) 	"strconv"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    7) 	"strings"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    8) 	"time"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200    9) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   10) 	"github.com/fatih/color"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   11) 	"github.com/mit-dci/lit/litrpc"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   12) 	"github.com/mit-dci/lit/lnutil"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   13) )
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   14) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   15) var dlcCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   16) 	Format: fmt.Sprintf("%s%s%s\n", lnutil.White("dlc"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   17) 		lnutil.ReqColor("subcommand"), lnutil.OptColor("parameters...")),
ce4e0a35 (James Lovejoy        2018-06-04 13:02:23 -0400   18) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   19) 		"Command for working with discreet log contracts. ",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   20) 		"Subcommand can be one of:",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   21) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   22) 			lnutil.White("oracle"), "Command to manage oracles"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   23) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   24) 			lnutil.White("contract"), "Command to manage contracts"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   25) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   26) 	ShortDescription: "Command for working with Discreet Log Contracts.\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   27) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   28) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   29) var oracleCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   30) 	Format: fmt.Sprintf("%s%s%s\n", lnutil.White("dlc oracle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   31) 		lnutil.ReqColor("subcommand"), lnutil.OptColor("parameters...")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   32) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   33) 		"Command for managing oracles. Subcommand can be one of:",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   34) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   35) 			lnutil.White("add"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   36) 			"Adds a new oracle by manually providing the pubkey"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   37) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   38) 			lnutil.White("import"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   39) 			"Imports a new oracle using a URL to its REST interface"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   40) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   41) 			lnutil.White("ls"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   42) 			"Shows a list of known oracles"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   43) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   44) 	ShortDescription: "Manages oracles for the Discreet Log Contracts.\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   45) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   46) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   47) var listOraclesCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   48) 	Format:           fmt.Sprintf("%s\n", lnutil.White("dlc oracle ls")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   49) 	Description:      "Shows a list of known oracles\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   50) 	ShortDescription: "Shows a list of known oracles\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   51) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   52) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   53) var importOracleCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   54) 	Format: fmt.Sprintf("%s%s%s\n", lnutil.White("dlc oracle import"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   55) 		lnutil.ReqColor("url"), lnutil.ReqColor("name")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   56) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   57) 		"Imports a new oracle using a URL to its REST interface",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   58) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   59) 			lnutil.White("url"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   60) 			"URL to the root of the publishes dlcoracle REST interface"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   61) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   62) 			lnutil.White("name"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   63) 			"Name under which to register the oracle in LIT"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   64) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   65) 	ShortDescription: "Imports a new oracle into LIT from a REST interface\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   66) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   67) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   68) var addOracleCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   69) 	Format: fmt.Sprintf("%s%s%s\n", lnutil.White("dlc oracle add"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   70) 		lnutil.ReqColor("keys"), lnutil.ReqColor("name")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   71) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   72) 		"Adds a new oracle by entering the pubkeys manually",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   73) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   74) 			lnutil.White("keys"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   75) 			"Public key for the oracle (33 bytes in hex)"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   76) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   77) 			lnutil.White("name"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   78) 			"Name under which to register the oracle in LIT"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   79) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   80) 	ShortDescription: "Adds a new oracle into LIT\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   81) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   82) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   83) var contractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   84) 	Format: fmt.Sprintf("%s%s%s\n", lnutil.White("dlc contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   85) 		lnutil.ReqColor("subcommand"), lnutil.OptColor("parameters...")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   86) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n%s\n%s\n"+
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   87) 		"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   88) 		"Command for managing contracts. Subcommand can be one of:",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   89) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   90) 			lnutil.White("new"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   91) 			"Adds a new draft contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   92) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   93) 			lnutil.White("view"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   94) 			"Views a contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   95) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   96) 			lnutil.White("viewpayout"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   97) 			"Views the payout table of a contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   98) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200   99) 			lnutil.White("setoracle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  100) 			"Sets a contract to use a particular oracle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  101) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  102) 			lnutil.White("settime"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  103) 			"Sets the settlement time of a contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  104) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  105) 			lnutil.White("setdatafeed"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  106) 			"Sets the data feed to use, will fetch the R point"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  107) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  108) 			lnutil.White("setrpoint"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  109) 			"Sets the R point manually"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  110) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  111) 			lnutil.White("setfunding"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  112) 			"Sets the funding parameters of a contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  113) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  114) 			lnutil.White("setdivision"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  115) 			"Sets the settlement division of a contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  116) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  117) 			lnutil.White("setcointype"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  118) 			"Sets the cointype of a contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  119) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  120) 			lnutil.White("offer"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  121) 			"Offer a draft contract to one of your peers"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  122) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  123) 			lnutil.White("decline"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  124) 			"Decline a contract sent to you"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  125) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  126) 			lnutil.White("settle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  127) 			"Settles the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  128) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  129) 			lnutil.White("ls"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  130) 			"Shows a list of known contracts"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  131) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  132) 	ShortDescription: "Manages oracles for the Discreet Log Contracts.\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  133) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  134) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  135) var listContractsCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  136) 	Format:           fmt.Sprintf("%s\n", lnutil.White("dlc contract ls")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  137) 	Description:      "Shows a list of known contracts\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  138) 	ShortDescription: "Shows a list of known contracts\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  139) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  140) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  141) var addContractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  142) 	Format:           fmt.Sprintf("%s\n", lnutil.White("dlc contract add")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  143) 	Description:      "Adds a new draft contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  144) 	ShortDescription: "Adds a new draft contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  145) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  146) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  147) var viewContractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  148) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract view"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  149) 		lnutil.ReqColor("id")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  150) 	Description: fmt.Sprintf("%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  151) 		"Views the current status of a contract",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  152) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  153) 			lnutil.White("id"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  154) 			"The ID of the contract to view"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  155) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  156) 	ShortDescription: "Views the current status of a contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  157) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  158) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  159) var viewContractPayoutCommand = &Command{
ce4e0a35 (James Lovejoy        2018-06-04 13:02:23 -0400  160) 	Format: fmt.Sprintf("%s%s%s%s%s\n", lnutil.White("dlc contract viewpayout"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  161) 		lnutil.ReqColor("id"), lnutil.ReqColor("start"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  162) 		lnutil.ReqColor("end"), lnutil.ReqColor("increment")),
ce4e0a35 (James Lovejoy        2018-06-04 13:02:23 -0400  163) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  164) 		"Views the payout table of a contract",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  165) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  166) 			lnutil.White("id"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  167) 			"The ID of the contract to view"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  168) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  169) 			lnutil.White("start"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  170) 			"The start value to print payout data for"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  171) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  172) 			lnutil.White("end"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  173) 			"The end value to print payout data for"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  174) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  175) 			lnutil.White("increment"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  176) 			"Print every X oracle value (1 = all)"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  177) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  178) 	ShortDescription: "Views the payout table of a contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  179) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  180) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  181) var setContractOracleCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  182) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract setoracle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  183) 		lnutil.ReqColor("cid", "oid")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  184) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  185) 		"Configures a contract for using a specific oracle",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  186) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  187) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  188) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  189) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  190) 			lnutil.White("oid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  191) 			"The ID of the oracle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  192) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  193) 	ShortDescription: "Configures a contract for using a specific oracle\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  194) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  195) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  196) var setContractDatafeedCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  197) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract setdatafeed"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  198) 		lnutil.ReqColor("cid", "feed")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  199) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  200) 		"Sets the data feed to use for the contract",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  201) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  202) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  203) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  204) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  205) 			lnutil.White("feed"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  206) 			"The ID of the data feed (provided by the oracle)"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  207) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  208) 	ShortDescription: "Sets the data feed to use for the contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  209) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  210) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  211) var setContractRPointCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  212) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract setrpoint"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  213) 		lnutil.ReqColor("cid", "rpoint")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  214) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  215) 		"Sets the R point to use for the contract",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  216) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  217) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  218) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  219) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  220) 			lnutil.White("rpoint"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  221) 			"The Rpoint of the publication to use (33 byte in hex)"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  222) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  223) 	ShortDescription: "Sets the R point to use for the contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  224) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  225) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  226) var setContractSettlementTimeCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  227) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract settime"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  228) 		lnutil.ReqColor("cid", "time")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  229) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  230) 		"Sets the settlement time for the contract",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  231) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  232) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  233) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  234) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  235) 			lnutil.White("time"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  236) 			"The settlement time (unix timestamp)"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  237) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  238) 	ShortDescription: "Sets the settlement time for the contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  239) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  240) var setContractFundingCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  241) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract setfunding"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  242) 		lnutil.ReqColor("cid", "ourAmount", "theirAmount")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  243) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  244) 		"Sets the amounts both parties in the contract will fund",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  245) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  246) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  247) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  248) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  249) 			lnutil.White("ourAmount"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  250) 			"The amount we will fund"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  251) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  252) 			lnutil.White("theirAmount"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  253) 			"The amount our peer will fund"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  254) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  255) 	ShortDescription: "Sets the amount both parties will fund\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  256) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  257) var setContractDivisionCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  258) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract setdivision"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  259) 		lnutil.ReqColor("cid", "valueAllForUs", "valueAllForThem")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  260) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  261) 		"Sets the values of the oracle data that will result in the full"+
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  262) 			"contract funds being paid to either peer",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  263) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  264) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  265) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  266) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  267) 			lnutil.White("valueAllForUs"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  268) 			"The outcome with which we will be entitled to the full"+
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  269) 				" contract value"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  270) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  271) 			lnutil.White("valueAllForThem"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  272) 			"The outcome with which our peer will be entitled to the full"+
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  273) 				" contract value"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  274) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  275) 	ShortDescription: "Sets the edge values for dividing the funds\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  276) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  277) var setContractCoinTypeCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  278) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract setcointype"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  279) 		lnutil.ReqColor("cid", "cointype")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  280) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  281) 		"Sets the coin type to use for the contract",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  282) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  283) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  284) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  285) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  286) 			lnutil.White("cointype"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  287) 			"The ID of the coin type to use for the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  288) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  289) 	ShortDescription: "Sets the coin type to use for the contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  290) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  291) var declineContractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  292) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract decline"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  293) 		lnutil.ReqColor("cid")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  294) 	Description: fmt.Sprintf("%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  295) 		"Declines a contract offered to you",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  296) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  297) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  298) 			"The ID of the contract to decline"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  299) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  300) 	ShortDescription: "Declines a contract offered to you\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  301) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  302) var acceptContractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  303) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract accept"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  304) 		lnutil.ReqColor("cid")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  305) 	Description: fmt.Sprintf("%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  306) 		"Accepts a contract offered to you",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  307) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  308) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  309) 			"The ID of the contract to accept"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  310) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  311) 	ShortDescription: "Accepts a contract offered to you\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  312) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  313) var offerContractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  314) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract offer"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  315) 		lnutil.ReqColor("cid", "peer")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  316) 	Description: fmt.Sprintf("%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  317) 		"Offers a contract to one of your peers",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  318) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  319) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  320) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  321) 		fmt.Sprintf("%-10s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  322) 			lnutil.White("cointype"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  323) 			"The ID of the peer to offer the contract to"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  324) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  325) 	ShortDescription: "Offers a contract to one of your peers\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  326) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  327) var settleContractCommand = &Command{
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  328) 	Format: fmt.Sprintf("%s%s\n", lnutil.White("dlc contract settle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  329) 		lnutil.ReqColor("cid", "oracleValue", "oracleSig")),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  330) 	Description: fmt.Sprintf("%s\n%s\n%s\n%s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  331) 		"Settles the contract based on a value and signature from the oracle",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  332) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  333) 			lnutil.White("cid"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  334) 			"The ID of the contract"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  335) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  336) 			lnutil.White("oracleValue"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  337) 			"The value the oracle published"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  338) 		fmt.Sprintf("%-20s %s",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  339) 			lnutil.White("oracleSig"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  340) 			"The signature from the oracle"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  341) 	),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  342) 	ShortDescription: "Settles the contract\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  343) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  344) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  345) func (lc *litAfClient) Dlc(textArgs []string) error {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  346) 	if len(textArgs) > 0 && textArgs[0] == "-h" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  347) 		fmt.Fprintf(color.Output, dlcCommand.Format)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  348) 		fmt.Fprintf(color.Output, dlcCommand.Description)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  349) 		return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  350) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  351) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  352) 	if len(textArgs) > 0 && textArgs[0] == "oracle" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  353) 		return lc.DlcOracle(textArgs[1:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  354) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  355) 	if len(textArgs) > 0 && textArgs[0] == "contract" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  356) 		return lc.DlcContract(textArgs[1:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  357) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  358) 	return fmt.Errorf(dlcCommand.Format)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  359) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  360) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  361) func (lc *litAfClient) DlcOracle(textArgs []string) error {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  362) 	if len(textArgs) > 0 && textArgs[0] == "-h" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  363) 		fmt.Fprintf(color.Output, oracleCommand.Format)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  364) 		fmt.Fprintf(color.Output, oracleCommand.Description)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  365) 		return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  366) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  367) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  368) 	if len(textArgs) > 0 && textArgs[0] == "ls" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  369) 		return lc.DlcListOracles(textArgs[1:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  370) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  371) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  372) 	if len(textArgs) > 0 && textArgs[0] == "add" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  373) 		return lc.DlcAddOracle(textArgs[1:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  374) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  375) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  376) 	if len(textArgs) > 0 && textArgs[0] == "import" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  377) 		return lc.DlcImportOracle(textArgs[1:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  378) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  379) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  380) 	return fmt.Errorf(oracleCommand.Format)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  381) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  382) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  383) func (lc *litAfClient) DlcListOracles(textArgs []string) error {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  384) 	args := new(litrpc.ListOraclesArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  385) 	reply := new(litrpc.ListOraclesReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  386) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  387) 	err := lc.Call("LitRPC.ListOracles", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  388) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  389) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  390) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  391) 	if len(reply.Oracles) == 0 {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  392) 		fmt.Println("No oracles found")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  393) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  394) 	for _, o := range reply.Oracles {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  395) 		fmt.Fprintf(color.Output, "%04d: [%x...%x...%x]  %s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  396) 			o.Idx, o.A[:2], o.A[15:16], o.A[31:], o.Name)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  397) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  398) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  399) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  400) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  401) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  402) func (lc *litAfClient) DlcImportOracle(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  403) 	stopEx, err := CheckHelpCommand(importOracleCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  404) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  405) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  406) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  407) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  408) 	args := new(litrpc.ImportOracleArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  409) 	reply := new(litrpc.ImportOracleReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  410) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  411) 	args.Url = textArgs[0]
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  412) 	args.Name = textArgs[1]
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  413) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  414) 	err = lc.Call("LitRPC.ImportOracle", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  415) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  416) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  417) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  418) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  419) 	fmt.Fprintf(color.Output, "Oracle successfully registered under ID %d\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  420) 		reply.Oracle.Idx)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  421) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  422) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  423) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  424) func (lc *litAfClient) DlcAddOracle(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  425) 	stopEx, err := CheckHelpCommand(addOracleCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  426) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  427) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  428) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  429) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  430) 	if err != nil {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  431) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  432) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  433) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  434) 	args := new(litrpc.AddOracleArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  435) 	reply := new(litrpc.AddOracleReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  436) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  437) 	args.Key = textArgs[0]
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  438) 	args.Name = textArgs[1]
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  439) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  440) 	err = lc.Call("LitRPC.AddOracle", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  441) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  442) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  443) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  444) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  445) 	fmt.Fprintf(color.Output, "Oracle successfully registered under ID %d\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  446) 		reply.Oracle.Idx)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  447) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  448) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  449) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  450) func (lc *litAfClient) DlcContract(textArgs []string) error {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  451) 	if len(textArgs) < 1 { // this shouldn't happen?
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  452) 		return fmt.Errorf("No argument specified")
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  453) 	}
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  454) 	cmd := textArgs[0]
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  455) 	textArgs = textArgs[1:]
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  456) 	if cmd == "-h" {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  457) 		fmt.Fprintf(color.Output, contractCommand.Format)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  458) 		fmt.Fprintf(color.Output, contractCommand.Description)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  459) 		return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  460) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  461) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  462) 	if cmd == "ls" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  463) 		return lc.DlcListContracts(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  464) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  465) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  466) 	if cmd == "new" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  467) 		return lc.DlcNewContract(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  468) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  469) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  470) 	if cmd == "view" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  471) 		return lc.DlcViewContract(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  472) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  473) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  474) 	if cmd == "viewpayout" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  475) 		return lc.DlcViewContractPayout(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  476) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  477) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  478) 	if cmd == "setoracle" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  479) 		return lc.DlcSetContractOracle(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  480) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  481) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  482) 	if cmd == "setdatafeed" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  483) 		return lc.DlcSetContractDatafeed(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  484) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  485) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  486) 	if cmd == "setrpoint" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  487) 		return lc.DlcSetContractRPoint(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  488) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  489) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  490) 	if cmd == "settime" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  491) 		return lc.DlcSetContractSettlementTime(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  492) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  493) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  494) 	if cmd == "setfunding" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  495) 		return lc.DlcSetContractFunding(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  496) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  497) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  498) 	if cmd == "setdivision" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  499) 		return lc.DlcSetContractDivision(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  500) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  501) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  502) 	if cmd == "setcointype" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  503) 		return lc.DlcSetContractCoinType(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  504) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  505) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  506) 	if cmd == "offer" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  507) 		return lc.DlcOfferContract(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  508) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  509) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  510) 	if cmd == "decline" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  511) 		return lc.DlcDeclineContract(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  512) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  513) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  514) 	if cmd == "accept" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  515) 		return lc.DlcAcceptContract(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  516) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  517) 
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  518) 	if cmd == "settle" {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  519) 		return lc.DlcSettleContract(textArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  520) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  521) 	return fmt.Errorf(contractCommand.Format)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  522) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  523) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  524) func (lc *litAfClient) DlcListContracts(textArgs []string) error {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  525) 	args := new(litrpc.ListContractsArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  526) 	reply := new(litrpc.ListContractsReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  527) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  528) 	err := lc.Call("LitRPC.ListContracts", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  529) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  530) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  531) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  532) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  533) 	if len(reply.Contracts) == 0 {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  534) 		fmt.Println("No contracts found")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  535) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  536) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  537) 	for _, c := range reply.Contracts {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  538) 		fmt.Fprintf(color.Output, "%04d: \n", c.Idx)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  539) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  540) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  541) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  542) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  543) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  544) func (lc *litAfClient) DlcNewContract(textArgs []string) error {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  545) 	args := new(litrpc.NewContractArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  546) 	reply := new(litrpc.NewContractReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  547) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  548) 	err := lc.Call("LitRPC.NewContract", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  549) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  550) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  551) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  552) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  553) 	fmt.Fprint(color.Output, "Contract successfully created\n\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  554) 	PrintContract(reply.Contract)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  555) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  556) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  557) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  558) func (lc *litAfClient) DlcViewContract(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  559) 	stopEx, err := CheckHelpCommand(viewContractCommand, textArgs, 1)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  560) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  561) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  562) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  563) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  564) 	args := new(litrpc.GetContractArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  565) 	reply := new(litrpc.GetContractReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  566) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  567) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  568) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  569) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  570) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  571) 	args.Idx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  572) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  573) 	err = lc.Call("LitRPC.GetContract", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  574) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  575) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  576) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  577) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  578) 	PrintContract(reply.Contract)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  579) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  580) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  581) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  582) func (lc *litAfClient) DlcViewContractPayout(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  583) 	stopEx, err := CheckHelpCommand(viewContractPayoutCommand, textArgs, 4)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  584) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  585) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  586) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  587) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  588) 	args := new(litrpc.GetContractArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  589) 	reply := new(litrpc.GetContractReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  590) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  591) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  592) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  593) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  594) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  595) 	start, err := strconv.ParseInt(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  596) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  597) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  598) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  599) 	end, err := strconv.ParseInt(textArgs[2], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  600) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  601) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  602) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  603) 	increment, err := strconv.ParseInt(textArgs[3], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  604) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  605) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  606) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  607) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  608) 	args.Idx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  609) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  610) 	err = lc.Call("LitRPC.GetContract", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  611) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  612) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  613) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  614) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  615) 	PrintPayout(reply.Contract, start, end, increment)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  616) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  617) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  618) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  619) func (lc *litAfClient) DlcSetContractOracle(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  620) 	stopEx, err := CheckHelpCommand(setContractOracleCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  621) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  622) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  623) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  624) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  625) 	args := new(litrpc.SetContractOracleArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  626) 	reply := new(litrpc.SetContractOracleReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  627) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  628) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  629) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  630) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  631) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  632) 	oIdx, err := strconv.ParseUint(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  633) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  634) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  635) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  636) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  637) 	args.OIdx = oIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  638) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  639) 	err = lc.Call("LitRPC.SetContractOracle", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  640) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  641) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  642) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  643) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  644) 	fmt.Fprint(color.Output, "Oracle set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  645) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  646) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  647) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  648) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  649) func (lc *litAfClient) DlcSetContractDatafeed(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  650) 	stopEx, err := CheckHelpCommand(setContractDatafeedCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  651) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  652) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  653) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  654) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  655) 	args := new(litrpc.SetContractDatafeedArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  656) 	reply := new(litrpc.SetContractDatafeedReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  657) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  658) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  659) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  660) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  661) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  662) 	feed, err := strconv.ParseUint(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  663) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  664) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  665) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  666) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  667) 	args.Feed = feed
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  668) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  669) 	err = lc.Call("LitRPC.SetContractDatafeed", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  670) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  671) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  672) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  673) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  674) 	fmt.Fprint(color.Output, "Datafeed set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  675) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  676) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  677) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  678) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  679) func (lc *litAfClient) DlcSetContractRPoint(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  680) 	stopEx, err := CheckHelpCommand(setContractRPointCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  681) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  682) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  683) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  684) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  685) 	args := new(litrpc.SetContractRPointArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  686) 	reply := new(litrpc.SetContractRPointReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  687) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  688) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  689) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  690) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  691) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  692) 	rPoint, err := hex.DecodeString(textArgs[1])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  693) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  694) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  695) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  696) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  697) 	copy(args.RPoint[:], rPoint[:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  698) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  699) 	err = lc.Call("LitRPC.SetContractRPoint", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  700) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  701) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  702) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  703) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  704) 	fmt.Fprint(color.Output, "R-point set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  705) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  706) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  707) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  708) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  709) func (lc *litAfClient) DlcSetContractSettlementTime(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  710) 	stopEx, err := CheckHelpCommand(setContractSettlementTimeCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  711) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  712) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  713) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  714) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  715) 	args := new(litrpc.SetContractSettlementTimeArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  716) 	reply := new(litrpc.SetContractSettlementTimeReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  717) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  718) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  719) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  720) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  721) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  722) 	time, err := strconv.ParseUint(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  723) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  724) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  725) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  726) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  727) 	args.Time = time
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  728) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  729) 	err = lc.Call("LitRPC.SetContractSettlementTime", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  730) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  731) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  732) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  733) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  734) 	fmt.Fprint(color.Output, "Settlement time set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  735) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  736) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  737) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  738) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  739) func (lc *litAfClient) DlcSetContractFunding(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  740) 	stopEx, err := CheckHelpCommand(setContractFundingCommand, textArgs, 3)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  741) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  742) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  743) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  744) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  745) 	args := new(litrpc.SetContractFundingArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  746) 	reply := new(litrpc.SetContractFundingReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  747) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  748) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  749) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  750) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  751) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  752) 	ourAmount, err := strconv.ParseInt(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  753) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  754) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  755) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  756) 	theirAmount, err := strconv.ParseInt(textArgs[2], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  757) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  758) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  759) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  760) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  761) 	args.OurAmount = ourAmount
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  762) 	args.TheirAmount = theirAmount
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  763) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  764) 	err = lc.Call("LitRPC.SetContractFunding", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  765) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  766) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  767) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  768) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  769) 	fmt.Fprint(color.Output, "Funding set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  770) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  771) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  772) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  773) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  774) func (lc *litAfClient) DlcSetContractCoinType(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  775) 	stopEx, err := CheckHelpCommand(setContractCoinTypeCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  776) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  777) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  778) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  779) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  780) 	args := new(litrpc.SetContractCoinTypeArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  781) 	reply := new(litrpc.SetContractCoinTypeReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  782) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  783) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  784) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  785) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  786) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  787) 	cointype, err := strconv.ParseUint(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  788) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  789) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  790) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  791) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  792) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  793) 	args.CoinType = uint32(cointype)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  794) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  795) 	err = lc.Call("LitRPC.SetContractCoinType", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  796) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  797) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  798) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  799) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  800) 	fmt.Fprint(color.Output, "Cointype set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  801) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  802) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  803) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  804) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  805) func (lc *litAfClient) DlcSetContractDivision(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  806) 	stopEx, err := CheckHelpCommand(setContractDivisionCommand, textArgs, 3)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  807) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  808) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  809) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  810) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  811) 	args := new(litrpc.SetContractDivisionArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  812) 	reply := new(litrpc.SetContractDivisionReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  813) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  814) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  815) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  816) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  817) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  818) 	fullyOurs, err := strconv.ParseInt(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  819) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  820) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  821) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  822) 	fullyTheirs, err := strconv.ParseInt(textArgs[2], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  823) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  824) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  825) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  826) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  827) 	args.ValueFullyOurs = fullyOurs
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  828) 	args.ValueFullyTheirs = fullyTheirs
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  829) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  830) 	err = lc.Call("LitRPC.SetContractDivision", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  831) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  832) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  833) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  834) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  835) 	fmt.Fprint(color.Output, "Funding set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  836) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  837) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  838) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  839) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  840) func (lc *litAfClient) DlcOfferContract(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  841) 	stopEx, err := CheckHelpCommand(offerContractCommand, textArgs, 2)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  842) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  843) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  844) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  845) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  846) 	args := new(litrpc.OfferContractArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  847) 	reply := new(litrpc.OfferContractReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  848) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  849) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  850) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  851) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  852) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  853) 	peerIdx, err := strconv.ParseUint(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  854) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  855) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  856) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  857) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  858) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  859) 	args.PeerIdx = uint32(peerIdx)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  860) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  861) 	err = lc.Call("LitRPC.OfferContract", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  862) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  863) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  864) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  865) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  866) 	fmt.Fprint(color.Output, "Offer sent set successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  867) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  868) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  869) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  870) 
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  871) func (lc *litAfClient) dlcContractRespond(textArgs []string, aor bool) error {
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  872) 	args := new(litrpc.ContractRespondArgs)
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  873) 	reply := new(litrpc.ContractRespondReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  874) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  875) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  876) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  877) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  878) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  879) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  880) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  881) 
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  882) 	err = lc.Call("LitRPC.ContractRespond", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  883) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  884) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  885) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  886) 
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  887) 	if aor {
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  888) 		fmt.Fprintf(color.Output, "Offer acceptance initiated. Use [dlc contract view %d] to see the status.\n", cIdx)
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  889) 	} else {
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  890) 		fmt.Fprint(color.Output, "Offer declined successfully\n")
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  891) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  892) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  893) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  894) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  895) 
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  896) func (lc *litAfClient) DlcDeclineContract(textArgs []string) error {
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  897) 	stopEx, err := CheckHelpCommand(declineContractCommand, textArgs, 1)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  898) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  899) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  900) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  901) 
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  902) 	return lc.dlcContractRespond(textArgs, false)
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  903) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  904) 
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  905) func (lc *litAfClient) DlcAcceptContract(textArgs []string) error {
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  906) 	stopEx, err := CheckHelpCommand(acceptContractCommand, textArgs, 1)
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  907) 	if err != nil || stopEx {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  908) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  909) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  910) 
2c301b82 (Trey Del Bonis       2018-07-24 12:16:07 -0400  911) 	return lc.dlcContractRespond(textArgs, true)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  912) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  913) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  914) func (lc *litAfClient) DlcSettleContract(textArgs []string) error {
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  915) 	stopEx, err := CheckHelpCommand(settleContractCommand, textArgs, 3)
cceba971 (Varunram Ganesh      2018-07-06 00:00:55 +0530  916) 	if err != nil || stopEx {
8c4fed55 (Varunram Ganesh      2018-06-12 17:35:23 -0400  917) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  918) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  919) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  920) 	args := new(litrpc.SettleContractArgs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  921) 	reply := new(litrpc.SettleContractReply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  922) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  923) 	cIdx, err := strconv.ParseUint(textArgs[0], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  924) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  925) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  926) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  927) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  928) 	args.CIdx = cIdx
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  929) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  930) 	oracleValue, err := strconv.ParseInt(textArgs[1], 10, 64)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  931) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  932) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  933) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  934) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  935) 	args.OracleValue = oracleValue
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  936) 	oracleSigBytes, err := hex.DecodeString(textArgs[2])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  937) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  938) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  939) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  940) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  941) 	copy(args.OracleSig[:], oracleSigBytes)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  942) 
57fc3916 (James Lovejoy        2018-06-04 14:23:11 -0400  943) 	err = lc.Call("LitRPC.SettleContract", args, reply)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  944) 	if err != nil {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  945) 		return err
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  946) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  947) 
56d1fb20 (Varunram Ganesh      2018-07-31 20:22:51 +0530  948) 	fmt.Fprint(color.Output, "Contract settled successfully\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  949) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  950) 	return nil
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  951) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  952) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  953) func PrintContract(c *lnutil.DlcContract) {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  954) 	fmt.Fprintf(color.Output, "%-30s : %d\n", lnutil.White("Index"), c.Idx)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  955) 	fmt.Fprintf(color.Output, "%-30s : [%x...%x...%x]\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  956) 		lnutil.White("Oracle public key"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  957) 		c.OracleA[:2], c.OracleA[15:16], c.OracleA[31:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  958) 	fmt.Fprintf(color.Output, "%-30s : [%x...%x...%x]\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  959) 		lnutil.White("Oracle R-point"), c.OracleR[:2],
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  960) 		c.OracleR[15:16], c.OracleR[31:])
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  961) 	fmt.Fprintf(color.Output, "%-30s : %s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  962) 		lnutil.White("Settlement time"),
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  963) 		time.Unix(int64(c.OracleTimestamp), 0).UTC().Format(time.UnixDate))
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  964) 	fmt.Fprintf(color.Output, "%-30s : %d\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  965) 		lnutil.White("Funded by us"), c.OurFundingAmount)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  966) 	fmt.Fprintf(color.Output, "%-30s : %d\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  967) 		lnutil.White("Funded by peer"), c.TheirFundingAmount)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  968) 	fmt.Fprintf(color.Output, "%-30s : %d\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  969) 		lnutil.White("Coin type"), c.CoinType)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  970) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  971) 	peer := "None"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  972) 	if c.PeerIdx > 0 {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  973) 		peer = fmt.Sprintf("Peer %d", c.PeerIdx)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  974) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  975) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  976) 	fmt.Fprintf(color.Output, "%-30s : %s\n", lnutil.White("Peer"), peer)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  977) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  978) 	status := "Draft"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  979) 	switch c.Status {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  980) 	case lnutil.ContractStatusActive:
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  981) 		status = "Active"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  982) 	case lnutil.ContractStatusClosed:
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  983) 		status = "Closed"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  984) 	case lnutil.ContractStatusOfferedByMe:
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  985) 		status = "Sent offer, awaiting reply"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  986) 	case lnutil.ContractStatusOfferedToMe:
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  987) 		status = "Received offer, awaiting reply"
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  988) 	case lnutil.ContractStatusAccepting:
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  989) 		status = "Accepting"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  990) 	case lnutil.ContractStatusAccepted:
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  991) 		status = "Accepted"
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  992) 	case lnutil.ContractStatusAcknowledged:
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  993) 		status = "Acknowledged"
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  994) 	case lnutil.ContractStatusError:
374483d5 (Gert-Jaap Glasbergen 2018-07-31 16:38:09 +0200  995) 		status = "Error"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  996) 	case lnutil.ContractStatusDeclined:
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  997) 		status = "Declined"
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  998) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200  999) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1000) 	fmt.Fprintf(color.Output, "%-30s : %s\n\n", lnutil.White("Status"), status)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1001) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1002) 	increment := int64(len(c.Division) / 10)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1003) 	PrintPayout(c, 0, int64(len(c.Division)), increment)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1004) }
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1005) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1006) func PrintPayout(c *lnutil.DlcContract, start, end, increment int64) {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1007) 	fmt.Fprintf(color.Output, "Payout division:\n\n")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1008) 	fmt.Fprintf(color.Output, "%-20s | %-20s | %-20s\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1009) 		"Oracle value", "Our payout", "Their payout")
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1010) 	fmt.Fprintf(color.Output, "%s\n", strings.Repeat("-", 66))
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1011) 
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1012) 	for i := start; i < end; i += increment {
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1013) 		fmt.Fprintf(color.Output, "%20d | %20d | %20d\n",
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1014) 			c.Division[i].OracleValue, c.Division[i].ValueOurs,
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1015) 			c.OurFundingAmount+c.TheirFundingAmount-c.Division[i].ValueOurs)
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1016) 	}
b6b85eb2 (Gert-Jaap Glasbergen 2018-05-01 16:16:37 +0200 1017) }
